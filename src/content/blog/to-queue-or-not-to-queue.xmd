---
title: 'To Queue or Not to Queue: A Case for Simplified Architecture'
description: "Why you're probably mis-categorizing your startup, and don't need to be"
pubDate: 'Jan 28 2024'
heroImage: '/are-you-ai.png'
---

I've been working with a lot of event-driven systems recently,. At SkySlope we have a number of applications using queues for
sensible reasons:

- Workloads with a consistently high/frequent bursts of requests that might otherwise overwhelm the consuming systems
- Eve

but I've come to notice that among these few queues that are mostly empty during peak hours, which got me thinking.

If a queue is empty, do you really need it?

Let me clarify that I'm not petitioning for queues to be exponentially growing - they should be trending to 0, but generally speaking not at 0.

You might be thinking 'If the queue is receiving messages, then it's doing it's job by processing down to 0'

It's true, in this case the queue is doing it's job. But, if your queues are empty, it suggest that you're either:

- Underestimating the volume of incoming messages
- Over-provisioning your queue consumers

Either of the two indicates an over-engineered solution where the benefit of a queue is lost.

Introducing queues as an early optimization strategy to do traffic control for a data flow that doesn't call for it
results in a needlessly complex system design, adding at least three, but up to five new components to your system, in every environment:

- The queue itself
- A dead-letter queue
- Monitoring & alerts
- An intermediary consuming service
- Infrastructure-as-code provisioning

That's a lot of effort, for what, in some cases, could have been simplified down to a direct service-to-service call.

Let's take an example of something I worked on recently.

We have multiple internal services that need to send events to Hubspot.

Queues aren't a drop in replacement for an SDK for proxy service.

<!-- Because, if implemented properly: where there's a queue, there's a dead-letter queue, and where there's queues, there's more monitoring & alerts. -->

- Workloads with consistently high, or frequent bursts of requests that might otherwise overwhelm the consuming systems

<!--
## title

**bold**

![image name](/image.png)

1. **bt**
   bb

- l
